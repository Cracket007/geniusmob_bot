from openai import OpenAI
from telebot import TeleBot
from telebot.types import Message
from src.utils.helpers import (
    add_to_chat_history, 
    chat_histories,
    chat_contexts
)
from config import SYSTEM_INSTRUCTION, ADMIN_ID, OPENAI_API_KEY

# –°–∞–º–∞—è –ø—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI()

def handle_message(bot: TeleBot, message: Message):
    try:
        user_id = message.from_user.id
        user_message = message.text
        
        add_to_chat_history(user_id, "user", user_message)
        
        context = chat_contexts.get(user_id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
        
        full_instruction = f"""{SYSTEM_INSTRUCTION}

–ü–û–¢–û–ß–ù–ò–ô –ö–û–ù–¢–ï–ö–°–¢ –†–û–ó–ú–û–í–ò:
{context}

–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ü—å–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é."""

        messages = [
            {"role": "system", "content": full_instruction}
        ] + chat_histories[user_id][-3:]
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        
        ai_response = response.choices[0].message.content
        add_to_chat_history(user_id, "assistant", ai_response)
        
        if "[[CREATE_REPAIR_REQUEST]]" in ai_response:
            clean_response = ai_response.replace("[[CREATE_REPAIR_REQUEST]]", "")
            repair_info = extract_repair_info(chat_histories[user_id])
            admin_message = format_repair_request(repair_info)
            bot.send_message(ADMIN_ID, admin_message)
            bot.send_message(message.chat.id, clean_response)
        else:
            bot.send_message(message.chat.id, ai_response)
            
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
        bot.send_message(message.chat.id, "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

def extract_repair_info(chat_history):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–ò–∑–≤–ª–µ–∫–∏—Ç–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –í–µ—Ä–Ω–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."},
                {"role": "user", "content": str(chat_history)}
            ]
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏"

def format_repair_request(repair_info):
    return f"""
üì± –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç!

{repair_info}
    """ 